deepdive {
  
  connection: {
    url: "jdbc:postgresql://localhost/deepdive_titles"
    user: "czhang"
    password: "bB19871121"
  }

  calibration: {
    holdout_fraction: 0.5
  }

  schema.variables:{
    relations_taxonomy.is_correct: Boolean
    relations_formation.is_correct: Boolean
    relations_formationtemporal.is_correct: Boolean
    relations_formationlocation.is_correct: Boolean
  }

  relations: {}

  extraction.extractors: {

    #load_docs.output_relation: "documents"
    #load_docs.input: "SELECT 0"
    #load_docs.udf: "../paleopaleo/udf/load_docs.py"

    load_entity_candidates.output_relation: "entities"
    load_entity_candidates.input: "SELECT 0"
    load_entity_candidates.udf: "../paleopaleo/udf/load_entity_candidates.py"
    #load_entity_candidates.dependencies: ["load_docs"]
    load_entity_candidates.output_batch_size: 1000000

    load_relation_candidates3.output_relation: "relations_features_formationtemporal"
    load_relation_candidates3.input: "SELECT 0"
    load_relation_candidates3.udf: "../paleopaleo/udf/load_relation_candidates_formationtemporal.py"
    #load_relation_candidates3.dependencies: ["load_docs"]
    load_relation_candidates3.output_batch_size: 1000000

    load_relation_candidates1.output_relation: "relations_features_taxonomy"
    load_relation_candidates1.input: "SELECT 0"
    load_relation_candidates1.udf: "../paleopaleo/udf/load_relation_candidates_taxonomy.py"
    #load_relation_candidates1.dependencies: ["load_docs"]
    load_relation_candidates1.output_batch_size: 1000000

    load_relation_candidates2.output_relation: "relations_features_formation"
    load_relation_candidates2.input: "SELECT 0"
    load_relation_candidates2.udf: "../paleopaleo/udf/load_relation_candidates_formation.py"
    #load_relation_candidates2.dependencies: ["load_docs"]
    load_relation_candidates2.output_batch_size: 1000000

    load_relation_candidates4.output_relation: "relations_features_formationlocation"
    load_relation_candidates4.input: "SELECT 0"
    load_relation_candidates4.udf: "../paleopaleo/udf/load_relation_candidates_formationlocation.py"
    #load_relation_candidates4.dependencies: ["load_docs"]
    load_relation_candidates4.output_batch_size: 1000000


    load_relation_varialbe3.output_relation: "relations_formationtemporal"
    load_relation_varialbe3.input: "SELECT DISTINCT docid , type , eid1 , eid2 , entity1 , entity2 , is_correct from relations_features_formationtemporal"
    load_relation_varialbe3.udf: "../paleopaleo/udf/load_relation_candidates.py"
    load_relation_varialbe3.dependencies: ["load_relation_candidates3"]
    load_relation_varialbe3.output_batch_size: 1000000

    load_relation_varialbe1.output_relation: "relations_taxonomy"
    load_relation_varialbe1.input: "SELECT DISTINCT docid , type , eid1 , eid2 , entity1 , entity2 , is_correct from relations_features_taxonomy"
    load_relation_varialbe1.udf: "../paleopaleo/udf/load_relation_candidates.py"
    load_relation_varialbe1.dependencies: ["load_relation_candidates1"]
    load_relation_varialbe1.output_batch_size: 1000000

    load_relation_varialbe2.output_relation: "relations_formation"
    load_relation_varialbe2.input: "SELECT DISTINCT docid , type , eid1 , eid2 , entity1 , entity2 , is_correct from relations_features_formation"
    load_relation_varialbe2.udf: "../paleopaleo/udf/load_relation_candidates.py"
    load_relation_varialbe2.dependencies: ["load_relation_candidates2"]
    load_relation_varialbe2.output_batch_size: 1000000

    load_relation_varialbe4.output_relation: "relations_formationlocation"
    load_relation_varialbe4.input: "SELECT DISTINCT docid , type , eid1 , eid2 , entity1 , entity2 , is_correct from relations_features_formationlocation"
    load_relation_varialbe4.udf: "../paleopaleo/udf/load_relation_candidates.py"
    load_relation_varialbe4.dependencies: ["load_relation_candidates4"]
    load_relation_varialbe4.output_batch_size: 1000000


  }



  factors: {

    hardrule_taxonomy2.input_query: "select t0.features, t1.* from relations_features_taxonomy t0, relations_taxonomy t1 WHERE t0.docid=t1.docid AND t0.eid1=t1.eid1 AND t0.eid2=t1.eid2 AND features='TAXONOMY2-[SYSTEMATIC PALEONTOLOGY SECTION HEADER TYPE 1]';"
    hardrule_taxonomy2.function: "relations_taxonomy.is_correct = Imply()"
    hardrule_taxonomy2.weight: "100"


    fac_relations3.input_query: "select t0.features, t1.* from relations_features_formationtemporal t0, relations_formationtemporal t1 WHERE t0.docid=t1.docid AND t0.eid1=t1.eid1 AND t0.eid2=t1.eid2;"
    fac_relations3.function: "relations_formationtemporal.is_correct = Imply()"
    fac_relations3.weight: "?(relations_features_formationtemporal.features)"

    fac_relations4.input_query: "select t0.features, t1.* from relations_features_formationlocation t0, relations_formationlocation t1 WHERE t0.docid=t1.docid AND t0.eid1=t1.eid1 AND t0.eid2=t1.eid2;"
    fac_relations4.function: "relations_formationlocation.is_correct = Imply()"
    fac_relations4.weight: "?(relations_features_formationlocation.features)"

    fac_relations1.input_query: "select t0.features, t1.* from relations_features_taxonomy t0, relations_taxonomy t1 WHERE t0.docid=t1.docid AND t0.eid1=t1.eid1 AND t0.eid2=t1.eid2;"
    fac_relations1.function: "relations_taxonomy.is_correct = Imply()"
    fac_relations1.weight: "?(relations_features_taxonomy.features)"

    fac_relations2.input_query: "select t0.features, t1.* from relations_features_formation t0, relations_formation t1 WHERE t0.docid=t1.docid AND t0.eid1=t1.eid1 AND t0.eid2=t1.eid2;"
    fac_relations2.function: "relations_formation.is_correct = Imply()"
    fac_relations2.weight: "?(relations_features_formation.features)"

    fac_relations1_bias.input_query: "select relations_taxonomy.* from relations_taxonomy"
    fac_relations1_bias.function: "relations_taxonomy.is_correct = Imply()"
    fac_relations1_bias.weight: "?(relations_taxonomy.type)"

    fac_relations2_bias.input_query: "select relations_formation.* from relations_formation"
    fac_relations2_bias.function: "relations_formation.is_correct = Imply()"
    fac_relations2_bias.weight: "?(relations_formation.type)"

    fac_relations3_bias.input_query: "select relations_formationtemporal.* from relations_formationtemporal"
    fac_relations3_bias.function: "relations_formationtemporal.is_correct = Imply()"
    fac_relations3_bias.weight: "?(relations_formationtemporal.type)"

    fac_relations4_bias.input_query: "select relations_formationlocation.* from relations_formationlocation"
    fac_relations4_bias.function: "relations_formationlocation.is_correct = Imply()"
    fac_relations4_bias.weight: "?(relations_formationlocation.type)"



  }

  sampler.sampler_args: "-l 200 -s 10 -i 1000 -t 4 --diminish 0.95 --alpha 0.1"
  sampler.java_args = "-Xmx8g"

}






