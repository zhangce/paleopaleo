deepdive {
  
  connection: {
    url: "jdbc:postgresql://localhost/deepdive_titles"
    user: "czhang"
    password: "bB19871121"
  }

  calibration: {
    holdout_fraction: 0.5
  }

  schema.variables:{
    relations_taxonomy.is_correct: Boolean
    relations_formation.is_correct: Boolean
    relations_formationtemporal.is_correct: Boolean
    relations_formationlocation.is_correct: Boolean
  }

  relations: {}

  extraction.extractors: {

    load_docs.output_relation: "documents"
    load_docs.input: "SELECT 0"
    load_docs.udf: "examples/paleo/udf/load_docs.py"

    #load_entity_candidates.output_relation: "entities"
    #load_entity_candidates.input: "SELECT * FROM documents"
    #load_entity_candidates.udf: "examples/paleo/udf/load_entity_candidates.py"
    #load_entity_candidates.dependencies: ["load_docs"]

    #load_relation_candidates3.output_relation: "relations_formationtemporal"
    #load_relation_candidates3.input: "SELECT * FROM documents"
    #load_relation_candidates3.udf: "examples/paleo/udf/load_relation_candidates_formationtemporal.py"
    #load_relation_candidates3.dependencies: ["load_docs"]

    #load_relation_candidates1.output_relation: "relations_taxonomy"
    #load_relation_candidates1.input: "SELECT * FROM documents"
    #load_relation_candidates1.udf: "examples/paleo/udf/load_relation_candidates_taxonomy.py"
    #load_relation_candidates1.dependencies: ["load_docs"]

    #load_relation_candidates2.output_relation: "relations_formation"
    #load_relation_candidates2.input: "SELECT * FROM documents"
    #load_relation_candidates2.udf: "examples/paleo/udf/load_relation_candidates_formation.py"
    #load_relation_candidates2.dependencies: ["load_docs"]

    #load_relation_candidates4.output_relation: "relations_formationlocation"
    #load_relation_candidates4.input: "SELECT * FROM documents"
    #load_relation_candidates4.udf: "examples/paleo/udf/load_relation_candidates_formationlocation.py"
    #load_relation_candidates4.dependencies: ["load_docs"]

  }

  factors: {

    fac_relations3.input_query: "select relations_formationtemporal.* from relations_formationtemporal"
    fac_relations3.function: "relations_formationtemporal.is_correct = Imply()"
    fac_relations3.weight: "?(relations_formationtemporal.features)"

    fac_relations3_bias.input_query: "select relations_formationtemporal.* from relations_formationtemporal"
    fac_relations3_bias.function: "relations_formationtemporal.is_correct = Imply()"
    fac_relations3_bias.weight: "?(relations_formationtemporal.type)"

    fac_relations1.input_query: "select relations_taxonomy.* from relations_taxonomy"
    fac_relations1.function: "relations_taxonomy.is_correct = Imply()"
    fac_relations1.weight: "?(relations_taxonomy.features)"

    fac_relations2.input_query: "select relations_formation.* from relations_formation"
    fac_relations2.function: "relations_formation.is_correct = Imply()"
    fac_relations2.weight: "?(relations_formation.features)"

    fac_relations4.input_query: "select relations_formationlocation.* from relations_formationlocation"
    fac_relations4.function: "relations_formationlocation.is_correct = Imply()"
    fac_relations4.weight: "?(relations_formationlocation.features)"

    #fac_relations_bias.input_query: "select relations.* from relations WHERE type <> 'LOCATION' and type <> 'TEMPORAL'"
    #fac_relations_bias.function: "relations.is_correct = Imply()"
    #fac_relations_bias.weight: "?(relations.type)"

  }

  sampler.sampler_args: "-l 100 -s 10 -i 1000 -t 4"
  sampler.java_args = "-Xmx8g"

}






